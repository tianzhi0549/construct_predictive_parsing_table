program->declaration-list
declaration-list->declaration-list declaration
declaration-list->declaration
declaration->var-declaration
declaration->fun-declaration
var-declaration->type-specifier $ID square-brackets-num
square-brackets-num->$[ $NUM $] $;
square-brackets-num->$;
type-specifier->$int
type-specifier->$void
fun-declaration->type-specifier $ID $( params $)
fun-declaration->compound-stmt
params->param-list
params->$void
param-list->param-list $, param
param-list->param
param->type-specifier $ID square-brackets
square-brackets->$[ $]
square-brackets->
compound-stmt->${ local-declarations statement-list $}
local-declarations->local-declarations var-declaration
local-declarations->
statement-list->statement-list statement
statement-list->
statement->expression-stmt
statement->compound-stmt
statement->selection-stmt
statement->iteration-stmt
statement->return-stmt
expression-stmt->expression $;
expression-stmt->$;
selection-stmt->$if $( expression $) statement else-stmt
else-stmt->$else statement
else-stmt->
iteration-stmt->$while $( expression $) statement
return-stmt->$return return-value
return-value->$;
return-value->expression $;
expression->var $= expression
expression->simple-expression
var->$ID array
array->
array->$[ expression $]
simple-expression->additive-expression relop additive-expression
simple-expression->additive-expression
relop->$<
relop->$<=
relop->$>
relop->$>=
relop->$==
relop->$!=
additive-expression->additive-expression addop term
additive-expression->term
addop->$+
addop->$-
term->term mulop factor
term->factor
mulop->$*
mulop->$/
factor->$( expression $)
factor->var
factor->call
factor->$NUM
call->$ID $( args $)
args->arg-list
args->
arg-list->arg-list $, expression
arg-list->expression
